/*
 デザイン要素はできるだけXDにやらせる
 こちらで定義にするのはUnityでの挙動になるようにする

 CSSパーサは以下のものを利用
 https://jsfiddle.net/developit/vzkckrw4/
 制限： Style-Valueに{}があるとおかしくなる

 セレクタに改行があるとエラーになる
 */

/*
 idについてのルールは極力つけず、classにつけるようにするのが良いのではないだろうか
 */
* {
  layer: UI;
}

/*
 横にならべる
 */
.layout-x {
  layout-group: x;
  /*layout-group-control-child-size: width height;
  layout-group-child-force-expand: width;*/
  content-size-fitter-horizontal-fit: preferred-size;
}

/*
 縦にならべる
 */
.vertical-stack,
.stack-y,
.layout-y {
  layout-group: y;
  /*layout-group-control-child-size: width height;
  layout-group-child-force-expand: width;*/
  content-size-fitter-vertical-fit: preferred-size;
}

/*
 グリッド状にならべる 横に伸びる
 */
.layout-grid-x {
  layout-group: grid;
  layout-group-control-child-size: width height;
  layout-group-child-force-expand: height;
  layout-group-start-axis: y;
  content-size-fitter-horizontal-fit: preferred-size;
}

/*
 グリッド状にならべる 縦に伸びる
 */
.layout-grid-y {
  layout-group: grid;
  layout-group-control-child-size: width height;
  layout-group-child-force-expand: width;
  layout-group-start-axis: x;
  content-size-fitter-vertical-fit: preferred-size;
}

/*
 親が自動レイアウトをもっている場合に
 これ以下のグループが必要なPREFERREDサイズを設定する
 */
.layout-rect {
  layout-element: preferred;
}

/*
 リピードグリッドはViewport扱い
 */
[typeof='RepeatGrid'] {
  create-content: true;
  create-content-name: '.content';
  rect-mask-twod: true;
}

/*
 リピードグリッドの子は、Layout-elementを持つ
 */
[typeof='RepeatGrid'] > * {
  unity-name: 'rg-child(${childIndex})';
}

[typeof='ScrollableGroup'] {
  create-content: true;
  create-content-name: '.content';
  rect-mask-twod: true;
  scroll-rect: true;
  scroll-rect-content-target: '.content';
}

.padding {
  layout-group: y;
  layout-group-child-control-size: width height;
  layout-group-child-force-expand: width height;
}

.padding > * {
  layout-element: if-no-layout-properties preferred;
  layout-element-preferred-width: bounds;
  layout-element-preferred-height: bounds;
}

/*
.padding直下の一番下のレイヤーは画像化、コンポーネント化する
最下のレイヤー
first-childになる
 */
.padding > *:first-child {
  component: true;
  image: true;
}

.viewport-xy {
  create-content: true;
  create-content-name: '.content';
  rect-mask-twod: true;
  scroll-rect: x y;
  scroll-rect-content-target: '.content';
}

.viewport-layout-x {
  create-content: true;
  create-content-name: '.content.layout-x';
  rect-mask-twod: true;
  scroll-rect: x;
  scroll-rect-content-target: '.content';
}

.viewport-layout-y {
  create-content: true;
  create-content-name: '.content.layout-y';
  rect-mask-twod: true;
  scroll-rect: y;
  scroll-rect-content-target: '.content';
}

.viewport-grid-x {
  create-content: true;
  create-content-name: '.content.layout-grid-x';
  rect-mask-twod: true;
  scroll-rect: x;
  scroll-rect-content-target: '.content';
  scroll-rect-horizontal-scrollbar-target: '.scrollbar-x';
}

.viewport-grid-y {
  create-content: true;
  create-content-name: '.content.layout-grid-y';
  rect-mask-twod: true;
  scroll-rect: y;
  scroll-rect-content-target: '.content';
  scroll-rect-vertical-scrollbar-target: '.scrollbar-y';
}

.viewport-layout-x > .content {
  conent-size-fitter: x;
  rect-transform-anchor-offset-y: 0 1 0 0;
}

.viewport-layout-y > .content {
  /*
   親と横幅がぴったり重なる
   anchor.min.x: 0
   anchor.max.x: 1
   offset.min.x: 0
   offset.max.x: 0
   */
  rect-transform-anchor-offset-x: 0 1 0 0;
}

.viewport-grid-x > .content {
  rect-transform-anchor-offset-x: 0 1 0 0;
}

.viewport-grid-y > .content {
  rect-transform-anchor-offset-y: 0 1 0 0;
}

.scrollbar-x {
  scrollbar: true;
  scrollbar-direction: ltr;
  scrollbar-handle-target: '.handle';
}

.scrollbar-x > .handle {
  fix: l r t b;
}

.scrollbar-y {
  scrollbar: true;
  scrollbar-direction: btt;
  scrollbar-handle-target: '.handle';
}

.scrollbar-y > .handle {
  fix: l r t b;
}

.slider-x {
  slider: true;
  slider-direction: ltr;
  slider-fill-rect-target: '.fill';
  slider-handle-rect-target: '.handle';
}

.slider-x > .fill {
  wrap: true;
}

.slider-x > .handle {
  wrap-slider-handle-x: true;
}

.slider-y {
  slider: true;
  slider-direction: btt;
  slider-fill-rect-target: '.fill';
  slider-handle-rect-target: '.handle';
}

.slider-y > .fill {
  wrap: true;
}

.slider-y > .handle {
  wrap-slider-handle-y: true;
}

.dots-scrollbar {
  scrollbar: true;
  scrollbar-direction: ltr;
  layout-group: x;
  layout-group-spacing-x: 9px;
  content-size-fitter-vertical-fit: preferred-size;
  content-size-fitter-horizontal-fit: preferred-size;
}

.dots-scrollbar > .toggle {
  layout-element: min;
}

.comp-image {
  image: true;
  component: true;
}

.image,
[tag-name='image'],
[tag-name$='-image'],
[tag-name$='_image'],
[class$='-image'],
[class$='_image'] {
  image: true;
}

.text,
[tag-name='text'],
[tag-name$='-text'],
[tag-name$='_text'],
[class$='-text'],
[class$='_text'] {
  text: true;
}

.textmp,
[tag-name='textmp'],
[tag-name$='-textmp'],
[tag-name$='_textmp'],
[class$='-textmp'],
[class$='_textmp'] {
  textmp: true;
}

.button,
[tag-name='button'],
[tag-name$='-button'],
[tag-name$='_button'],
[class$='-button'],
[class$='_button'] {
  button: true;
  button-transition: color-tint;
  button-transition-target-graphic: '.target-image';
  button-transition-highlighted-sprite-target: '.highlighted-image';
  button-transition-pressed-sprite-target: '.pressed-image';
  button-transition-selected-sprite-target: '.selected-image';
  button-transition-disabled-sprite-target: '.disabled-image';
}

.toggle,
[tag-name$='toggle'],
[tag-name$='-toggle'],
[tag-name$='_toggle'],
[class$='-toggle'],
[class$='_toggle'] {
  toggle: true;
  toggle-transition: color-tint;
  toggle-transition-target-graphic: '.target-image';
  toggle-transition-highlighted-sprite-target: '.highlighted-image';
  toggle-transition-pressed-sprite-target: '.pressed-image';
  toggle-transition-selected-sprite-target: '.selected-image';
  toggle-transition-disabled-sprite-target: '.disabled-image';
  toggle-graphic-target: '.checked-image'; /* ONのときのチェック画像 */
}

.transition-sprite-swap {
  button-transition: sprite-swap;
  toggle-transition: sprite-swap;
}

.no-slice {
  image-slice: false;
}

.input,
[tag-name$='input'],
[tag-name$='-input'],
[tag-name$='_input'],
[class$='-input'],
[class$='_input'] {
  input: true;
  input-transition: color-tint;
  input-transition-target-graphic: '.target-image';
  input-transition-highlighted-sprite-target: '.highlighted-image';
  input-transition-pressed-sprite-target: '.pressed-image';
  input-transition-selected-sprite-target: '.selected-image';
  input-transition-disabled-sprite-target: '.disabled-image';
  input-target-graphic: '.target-image'; /* ONのときのチェック画像 */
  input-text-target: '.input-text';
  input-placeholder-target: '.placeholder';
}

.mask-image {
  image: true;
  component: true;
}
